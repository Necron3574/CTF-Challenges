import owiener
import random
import math
from sympy.ntheory import isprime
from sympy.functions.elementary.miscellaneous import cbrt
from sympy.ntheory.modular import crt
from Crypto.PublicKey import RSA
from Crypto.Util.number import long_to_bytes
import itertools

def extended_gcd(aa, bb):
    lastremainder, remainder = abs(aa), abs(bb)
    x, lastx, y, lasty = 0, 1, 1, 0
    while remainder:
        lastremainder, (quotient, remainder) = remainder, divmod(
            lastremainder, remainder)
        x, lastx = lastx - quotient*x, x
        y, lasty = lasty - quotient*y, y
    return lastremainder, lastx * (-1 if aa < 0 else 1), lasty * (-1 if bb < 0 else 1)

def find_root(n, x):
    low = 0
    high = n
    while low < high:
        mid = (low+high)//2
        if mid**x < n:
            low = mid+1
        else:
            high = mid
    return low

def modinv(a, m):
    g, x, y = extended_gcd(a, m)
    if g != 1:
        raise ValueError
    return x % m
def isqrt(x):
    """Return the integer part of the square root of x, even for very
    large integer values."""
    if x < 0:
        raise ValueError('square root not defined for negative numbers')
    if x < 150:
        return int(math.sqrt(x))  # use math's sqrt() for small parameters
    n = int(x)
    if n <= 1:
        return n  # handle sqrt(0)==0, sqrt(1)==1
    # Make a high initial estimate of the result (a little lower is slower!!!)
    r = 1 << ((n.bit_length() + 1) >> 1)
    while True:
        newr = (r + n // r) >> 1  # next estimate by Newton-Raphson
        if newr >= r:
            return r
        r = newr
n1 = 17200112028133294711565666215375568724525294724043379481915069637193801653582754570185143619051145361583914970797820247595328497370539030122492102703615022735513859524460039185139806071420704586376155777050724088582597458656936983280453618854754053219450933348899784715911403037245373164437898940938503084414033405427044921803583090214916107881316111470410656422259588461264247126648700327245817746067504799469381117616026731213627073414541860317891409523424590373365033856054846772357324451181379350612564168947524616455225695523945378147972379222469544382318238869636471055051473749062585686596498387665951198221699
n2 = 23179484541617420482492482966613619008960037587524564313476473440871398567813735160770802664753104984517367619631854059267640951191314151392510473252348756259808276611792482461315499908091661864768568678931369586744467965534532016672196360677240236374474881574584782445143905132737989920387670457286064260746046195224753800190881640676849872564634382828060459785425472600272249402171600864476094777744597124636500089987605006443507860822167218144698189027719763257218557919440520750709285147986630157830646407436504275473128942754614398811652592617084592973196107719536997579261958013094704010994819563245812246899883
n3 = 27181830909986943572908358917111745444832825386445142932068435483245314260738722870083875060348718201831651229619742763740468919153679782553061015193071230724127413543534245327660214724313069046481809004712538378305799960725655574819730185744636173397885556522702507583183844168023106863257375122918261014155501216343225707378825042897745796725716348253191859470041751420630211942856819489044542606665345843562379061199821220293257242590136725088162361875701227010348427040101707617904257078531097231820034797577874927462767728378597441984270780143297156383290650318173559040334020685540084427196658500530532900586997

c1 = 11973292581384003159917836954385240949757224660641725611538522237053731853306603716901189282552372428673895463065913162185609098462138170856635770412740640769364305971295829356990391886302210010001590166269333155938290970365683335554971549848034462106129632480623603803352504255816457203908376975218925013858706495614062121925874107652204633497031359783909082666055730052027123102983946308614573744572757386642007664754924135340876441088074555763368922548857669030671518531630628890392217979133689677541858737685828101419845852928868600609017008964929388779314218478045242070771396665151431829175734678646805153510467
c2 = 15849244666396650879845769809373555404059689832032182221791429924182442257554637643661503781880841438087819953688233498400826189341287118897985439795072411167926632490162341444061067865425671916145315817159508748526983971046371771489337095647540993353700821971248744868745785303738214839226927672215738304845523376046341952264491903292397780796692354427406679417542173628341083984852159073299521775935814704070620897960156217478021110541189987917244192001601996405687053536940333996373183030849694899563253516574444722304637083779348219917334921110117152089535168866650675486674034081342912088305347857009005286948655
c3 = 19933853145470758379866936218320437247480134422507165338703350512105223039084535855365538272700714361717614799720031922379607690047523724676082508804982842293005656052193109454881677786866328870036677050978000848371845642340880000867146002968483932038867345991672070479759888614947800612140041331478564227818039973108956675205015538083356317852680799477302297792960771582475767604294433818077133167302437850184941465111863203481845812886414529617510919069127501384229174855578212140005332450200331443278411838595141273339938791415725005418094691489079646099196465072318962593235120916946549325328118895386262672070695

n = n1 * n2 * n3
b1 = n // n1
b2 = n // n2
b3 = n // n3

b1i = modinv(b1, n1)
b2i = modinv(b2, n2)
b3i = modinv(b3, n3)

m1 = (c1 * b1 * b1i) % n
m2 = (c2 * b2 * b2i) % n
m3 = (c3 * b3 * b3i) % n
mc = (m1+m2+m3)%n
for e in range(0,1000):
    if b'zh3r0' in long_to_bytes(find_root(mc,e)):
        print(long_to_bytes(find_root(mc,e)))
